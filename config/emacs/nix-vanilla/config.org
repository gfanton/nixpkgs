#  -*- coding: utf-8 -*-
#+TITLE: Nix-Vanilla Emacs Configuration
#+AUTHOR: Generated from Spacemacs migration

* Performance optimizations

#+begin_src emacs-lisp
  (emacs-nix-log "Setting performance optimizations")
  ;; Increase gc-cons-threshold during startup for faster loading
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024))
  ;; LSP performance optimizations
  (setq gc-cons-percentage 0.6)
  (emacs-nix-log "Performance optimizations set")
#+end_src

* Use-package setup

#+begin_src emacs-lisp
  (emacs-nix-log "Setting up use-package")
  (require 'use-package)
  (setq use-package-always-ensure nil) ; Nix manages packages
  (setq use-package-always-defer t)
  (emacs-nix-log "use-package configured")
#+end_src

* Basic settings

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq visible-bell t)
  ;; Terminal-only settings (no GUI elements)
  (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (column-number-mode 1)
  (global-display-line-numbers-mode 1)

  ;; Enable savehist mode for persistent history
  (savehist-mode 1)
  (setq savehist-file "~/.emacs.d/savehist")
  (setq history-length 1000)
  (setq savehist-save-minibuffer-history t)
#+end_src

* Font configuration

#+begin_src emacs-lisp
  ;; Terminal-only setup - no font configuration needed
  ;; Terminal font is handled by the terminal emulator itself
  (emacs-nix-log "Terminal-only mode - skipping font configuration")
#+end_src

* Theme configuration

#+begin_src emacs-lisp
  ;; Theme
  (use-package catppuccin-theme
    :demand t
    :config
    (setq catppuccin-flavor 'macchiato)
    (load-theme 'catppuccin t))

  ;; Theme toggle function
  (defun my/toggle-theme ()
    "Toggle between light and dark theme."
    (interactive)
    (if (eq catppuccin-flavor 'macchiato)
        (progn
          (setq catppuccin-flavor 'latte)
          (catppuccin-reload))
      (progn
        (setq catppuccin-flavor 'macchiato)
        (catppuccin-reload))))
#+end_src

* Doom Modeline

#+begin_src emacs-lisp
  ;; Doom modeline for modern status bar
  (use-package doom-modeline
    :demand t
    :hook (after-init . doom-modeline-mode)
    :config
    ;; Enable icons (requires all-the-icons)
    (setq doom-modeline-icon t)
    ;; Show file icons
    (setq doom-modeline-major-mode-icon t)
    ;; Show colors for major modes
    (setq doom-modeline-major-mode-color-icon t)
    ;; Enable buffer state icons
    (setq doom-modeline-buffer-state-icon t)
    ;; Show file modification time
    (setq doom-modeline-buffer-modification-icon t)
    ;; Enable unicode fallback for terminal
    (setq doom-modeline-unicode-fallback t)
    ;; Set height
    (setq doom-modeline-height 25)
    ;; Set bar width
    (setq doom-modeline-bar-width 3)
    ;; Show project name
    (setq doom-modeline-project-detection 'auto)
    ;; Show workspace name
    (setq doom-modeline-workspace-name t)
    ;; Show LSP info
    (setq doom-modeline-lsp t)
    ;; Show github info
    (setq doom-modeline-github t)
    ;; Show mu4e notifications
    (setq doom-modeline-mu4e nil)
    ;; Show IRC notifications
    (setq doom-modeline-irc nil)
    ;; Environment variable
    (setq doom-modeline-env-version t)
    ;; Whether to use hud instead of default bar
    (setq doom-modeline-hud t))

  ;; All the icons for doom-modeline (terminal compatible)
  (use-package all-the-icons
    :demand t
    :config
    ;; Terminal mode - use unicode fallbacks, no font installation needed
    (setq all-the-icons-terminal-fallback-fonts nil)
    (emacs-nix-log "all-the-icons configured for terminal use"))
#+end_src

* Evil mode configuration

#+begin_src emacs-lisp
  (use-package evil
    :demand t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :demand t
    :config
    (evil-collection-init))

  (use-package evil-surround
    :after evil
    :demand t
    :config
    (global-evil-surround-mode 1))
#+end_src

* Keybinding framework

#+begin_src emacs-lisp
  ;; General keybinding framework
  (use-package general
    :demand t
    :config
    (general-create-definer my/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "M-SPC")

    ;; Major mode leader key (comma) for evil normal state
    (general-create-definer my/major-mode-keys
      :states '(normal visual)
      :prefix ","
      :non-normal-prefix "C-,")

    (my/leader-keys
      "f" '(:ignore t :which-key "files")
      "ff" '(find-file :which-key "find file")
      "fs" '(save-buffer :which-key "save file")
      "p" '(:ignore t :which-key "project")
      "pp" '(projectile-switch-project :which-key "switch project")
      "pf" '(projectile-find-file :which-key "find file in project")
      "g" '(:ignore t :which-key "git")
      "gs" '(magit-status :which-key "git status")
      "b" '(:ignore t :which-key "buffer")
      "bb" '(consult-buffer :which-key "switch buffer")
      "bd" '(kill-current-buffer :which-key "kill buffer")
      "bs" '(scratch-buffer :which-key "scratch buffer")
      "w" '(:ignore t :which-key "window")
      "wv" '(split-window-right :which-key "split vertical")
      "ws" '(split-window-below :which-key "split horizontal")
      "wd" '(delete-window :which-key "delete window")
      "s" '(:ignore t :which-key "search")
      "sp" '(my/consult-ripgrep-project :which-key "search project")
      "ss" '(consult-line :which-key "search current buffer")
      "si" '(consult-imenu :which-key "search imenu")
      "so" '(consult-outline :which-key "search outline")
      "sj" '(consult-line-multi :which-key "search all buffers")
      "c" '(:ignore t :which-key "code")
      "ca" '(lsp-execute-code-action :which-key "code action")
      "cr" '(lsp-rename :which-key "rename symbol")
      "cd" '(lsp-find-definition :which-key "go to definition")
      "cD" '(lsp-find-declaration :which-key "go to declaration")
      "ci" '(lsp-find-implementation :which-key "find implementation")
      "ct" '(lsp-find-type-definition :which-key "go to type definition")
      "cs" '(lsp-find-references :which-key "find references")
      "ch" '(lsp-describe-thing-at-point :which-key "describe at point")
      "cf" '(lsp-format-buffer :which-key "format buffer")
      "cF" '(lsp-format-region :which-key "format region")
      "co" '(lsp-organize-imports :which-key "organize imports")
      "cc" '(completion-at-point :which-key "complete at point")
      "l" '(:ignore t :which-key "lsp")
      "lr" '(lsp-workspace-restart :which-key "restart workspace")
      "ls" '(lsp-workspace-shutdown :which-key "shutdown workspace")
      "ld" '(lsp-describe-session :which-key "describe session")
      "lS" '(consult-lsp-symbols :which-key "workspace symbols")
      "lf" '(consult-lsp-file-symbols :which-key "file symbols")
      "le" '(consult-lsp-diagnostics :which-key "diagnostics")
      "t" '(:ignore t :which-key "toggle")
      "tt" '(my/toggle-theme :which-key "toggle theme")
      ;; macOS integration shortcuts
      "o" '(:ignore t :which-key "os")
      "om" '(:ignore t :which-key "macOS")
      "omc" '(osx/pbcopy :which-key "copy to clipboard")
      "omv" '(osx/pbpaste :which-key "paste from clipboard")
      "omd" '(osx/define-word-at-point :which-key "define word")
      "omD" '(osx/list-available-dictionaries :which-key "list dictionaries")
      "om+" '(osx/scale-font-up :which-key "scale font up")
      "om-" '(osx/scale-font-down :which-key "scale font down")
      "om0" '(osx/reset-font-size :which-key "reset font size")))

  (use-package which-key
    :demand t
    :config
    (which-key-mode))

  ;; LSP major mode keybindings (Spacemacs style)
  (defun my/lsp-setup-keybindings ()
    "Setup LSP keybindings in major mode style."
    (my/major-mode-keys
      :keymaps 'lsp-mode-map
      ;; Navigation (like Spacemacs SPC m g)
      "g" '(:ignore t :which-key "goto")
      "gd" 'lsp-find-definition
      "gD" 'lsp-find-declaration
      "gi" 'lsp-find-implementation
      "gt" 'lsp-find-type-definition
      "gr" 'lsp-find-references
      "gb" 'xref-go-back

      ;; Refactoring (like Spacemacs SPC m r)
      "r" '(:ignore t :which-key "refactor")
      "rr" 'lsp-rename

      ;; Actions (like Spacemacs SPC m a)
      "a" '(:ignore t :which-key "actions")
      "aa" 'lsp-execute-code-action

      ;; Format (like Spacemacs SPC m =)
      "=" '(:ignore t :which-key "format")
      "=b" 'lsp-format-buffer
      "=r" 'lsp-format-region
      "=o" 'lsp-organize-imports

      ;; Help (like Spacemacs SPC m h)
      "h" '(:ignore t :which-key "help")
      "hh" 'lsp-describe-thing-at-point

      ;; Backend/Workspace (like Spacemacs SPC m b)
      "b" '(:ignore t :which-key "backend")
      "br" 'lsp-workspace-restart
      "bs" 'lsp-workspace-shutdown
      "bd" 'lsp-describe-session))

  ;; Apply LSP keybindings when lsp-mode starts
  (add-hook 'lsp-mode-hook #'my/lsp-setup-keybindings)

  ;; Global navigation bindings for any LSP-enabled buffer
  (general-define-key
   :states '(normal visual)
   :keymaps 'lsp-mode-map
   "gr" 'lsp-find-references
   "gd" 'lsp-find-definition
   "gD" 'lsp-find-declaration
   "gi" 'lsp-find-implementation
   "gt" 'lsp-find-type-definition)

  ;; Evil normal state bindings for LSP UI
  (general-define-key
   :states 'normal
   :keymaps 'lsp-ui-peek-mode-map
   "j" 'lsp-ui-peek--select-next
   "k" 'lsp-ui-peek--select-prev
   "h" 'lsp-ui-peek--select-prev-file
   "l" 'lsp-ui-peek--select-next-file)

  ;; Modern consult/embark integration patterns (2024-2025 best practices)

  ;; Project search with better project root detection
  (defun my/consult-ripgrep-project (&optional initial)
    "Search project with consult-ripgrep using modern project detection."
    (interactive)
    (let ((project-root (or
                         ;; Try modern project.el first
                         (and (fboundp 'project-current)
                              (when-let (project (project-current))
                                (if (fboundp 'project-root)
                                    (project-root project)
                                  (car (project-roots project)))))
                         ;; Fallback to projectile
                         (projectile-project-root)
                         ;; Final fallback
                         default-directory)))
      (consult-ripgrep project-root initial)))

  ;; Modern wgrep integration (inspired by junkw/dot.emacs.d)
  (defun my/embark-export-wgrep ()
    "Export consult results to wgrep-enabled buffer."
    (interactive)
    (embark-export)
    ;; Auto-enable wgrep after export
    (run-with-timer 0.1 nil
                    (lambda ()
                      (when (derived-mode-p 'grep-mode)
                        (wgrep-change-to-wgrep-mode)))))
#+end_src

* Completion framework (Vertico ecosystem)

#+begin_src emacs-lisp
  ;; Vertico completion
  (use-package vertico
    :demand t
    :bind (:map vertico-map
                ("C-c C-e" . my/embark-export-wgrep))
    :config
    (vertico-mode))

  ;; === ORDERLESS: Flexible matching ===
  (use-package orderless
    :demand t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides 
     '((file (styles partial-completion))
       (eglot (styles orderless))
       (lsp-capf (styles orderless)))))

  (use-package marginalia
    :demand t
    :config
    (marginalia-mode))

  (use-package consult
    :bind (("C-s" . consult-line)
           ("C-x b" . consult-buffer)
           ("M-y" . consult-yank-pop))
    :init
    ;; Modern project integration (from minad/consult best practices)
    (setq consult-project-function
          (lambda (_may-prompt)
            (and (fboundp 'project-current)
                 (when-let (project (project-current))
                   (if (fboundp 'project-root)
                       (project-root project)
                     (car (project-roots project)))))))
    :config
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key '(:debounce 0.4 any))

    ;; Disable automatic follow in ripgrep, use M-. for manual follow
    (consult-customize
     consult-ripgrep :preview-key "M-."))

  (use-package embark
    :bind (("C-." . embark-act)
           ("C-;" . embark-dwim)
           ("C-c h b" . embark-bindings)
           :map minibuffer-local-map
           ("C-c C-e" . my/embark-export-wgrep))
    :config
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  ;; wgrep for editing grep results (modern approach)
  (use-package wgrep
    :config
    (setq wgrep-auto-save-buffer t)
    (setq wgrep-change-readonly-file t))

  ;; === CORFU: Modern completion UI ===
  (use-package corfu
    :demand t
    :custom
    ;; === AUTO-COMPLETION SETTINGS ===
    (corfu-auto t)                    ; Enable auto completion
    (corfu-auto-delay 0.2)           ; Quick response time
    (corfu-auto-prefix 2)            ; Start after 2 characters
    (corfu-cycle t)                  ; Enable cycling
    (corfu-preselect 'prompt)        ; Preselect first candidate
    (corfu-on-exact-match nil)       ; Don't auto-accept exact matches
    (corfu-scroll-margin 5)          ; Scroll margin
    
    ;; === APPEARANCE SETTINGS ===
    (corfu-max-width 80)             ; Maximum popup width
    (corfu-min-width 15)             ; Minimum popup width
    (corfu-count 10)                 ; Show up to 10 candidates
    (corfu-preview-current nil)      ; Don't preview (less distracting)
    (corfu-echo-documentation 0.25)  ; Quick doc in echo area
    
    :bind
    (:map corfu-map
          ;; Navigation
          ("TAB" . corfu-next)
          ([tab] . corfu-next)
          ("S-TAB" . corfu-previous)
          ([backtab] . corfu-previous)
          
          ;; Documentation (manual)
          ("M-d" . corfu-info-documentation)
          ("M-l" . corfu-info-location)
          ("M-p" . corfu-popupinfo-toggle)
          
          ;; Scroll documentation
          ("M-n" . corfu-popupinfo-scroll-up)
          ("M-p" . corfu-popupinfo-scroll-down)
          
          ;; Quick selection (with corfu-indexed)
          ("M-1" . corfu-indexed-complete)
          ("M-2" . corfu-indexed-complete)
          ("M-3" . corfu-indexed-complete)
          
          ;; Control
          ("C-g" . corfu-quit))
          
    :config
    (global-corfu-mode)
    (emacs-nix-log "Corfu completion system activated"))

  ;; === CORFU EXTENSIONS ===
  (with-eval-after-load 'corfu
    ;; Load all extensions
    (require 'corfu-info)       ; Manual documentation
    (require 'corfu-popupinfo)  ; Auto documentation popup
    (require 'corfu-history)    ; Remember completions
    (require 'corfu-indexed)    ; Number candidates
    
    ;; === POPUPINFO CONFIGURATION ===
    (setq corfu-popupinfo-delay 0.4)         ; Show after 0.4s
    (setq corfu-popupinfo-hide nil)          ; Don't auto-hide
    (setq corfu-popupinfo-resize t)          ; Resize based on content
    
    ;; Responsive sizing
    (if (display-graphic-p)
        (progn
          (setq corfu-popupinfo-max-width 100)
          (setq corfu-popupinfo-max-height 25))
      (progn
        (setq corfu-popupinfo-max-width 80)
        (setq corfu-popupinfo-max-height 15)))
    
    ;; Smart positioning
    (setq corfu-popupinfo-direction '(right left top bottom))
    
    ;; Enable extensions
    (corfu-popupinfo-mode 1)
    (corfu-history-mode 1)
    (corfu-indexed-mode 1)
    
    ;; Persist history
    (add-to-list 'savehist-additional-variables 'corfu-history)
    
    (emacs-nix-log "All Corfu extensions loaded and configured"))

  ;; === TERMINAL SUPPORT ===
  (use-package corfu-terminal
    :demand t
    :config
    ;; Smart terminal detection
    (defun my/corfu-enable-in-terminal ()
      "Enable corfu-terminal-mode in terminal frames."
      (unless (display-graphic-p (selected-frame))
        (corfu-terminal-mode 1)))
    
    ;; Enable for current session
    (unless (display-graphic-p)
      (corfu-terminal-mode 1))
    
    ;; Enable for new frames (daemon support)
    (add-hook 'server-after-make-frame-hook #'my/corfu-enable-in-terminal)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame
                  (my/corfu-enable-in-terminal))))
    
    (emacs-nix-log "Corfu terminal support configured"))
  
  ;; === TERMINAL POPUPINFO SUPPORT ===
  ;; Custom extension to enable documentation popups in terminal
  (use-package corfu-terminal-popupinfo
    :load-path "~/nixpkgs/config/emacs/packages/corfu-terminal-popupinfo"
    :after (corfu-terminal corfu-popupinfo)
    :config
    (unless (display-graphic-p)
      (corfu-terminal-popupinfo-mode 1)
      (emacs-nix-log "Corfu terminal popupinfo support enabled")))

  ;; Ensure popon is available for terminal mode
  (use-package popon)

  ;; === CAPE: Completion sources ===
  (use-package cape
    :demand t
    :config
    ;; Add useful completion sources
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)    ; Dynamic abbrev
    (add-to-list 'completion-at-point-functions #'cape-file)      ; File paths
    (add-to-list 'completion-at-point-functions #'cape-elisp-block) ; Elisp blocks
    
    ;; Mode-specific sources
    (add-hook 'org-mode-hook 
              (lambda ()
                (add-to-list 'completion-at-point-functions #'cape-elisp-block)))
                
    (add-hook 'text-mode-hook
              (lambda ()
                (add-to-list 'completion-at-point-functions #'cape-dict)))
                
    (emacs-nix-log "Cape completion sources configured"))
#+end_src

* LSP Mode

#+begin_src emacs-lisp
  ;; === LSP-MODE: Language Server Protocol ===
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-completion-mode . my/lsp-mode-setup-completion)
    :custom
    ;; === COMPLETION SETTINGS ===
    (lsp-completion-provider :none)          ; Use CAPF (Corfu)
    (lsp-completion-show-detail t)           ; Show details
    (lsp-completion-show-kind t)             ; Show kinds
    
    ;; === PERFORMANCE OPTIMIZATIONS ===
    (lsp-idle-delay 0.5)                    ; Update delay
    (lsp-log-io nil)                        ; No IO logging
    (lsp-file-watch-threshold 2000)         ; File watch limit
    (lsp-enable-file-watchers nil)          ; Disable watchers
    (lsp-response-timeout 30)               ; Reasonable timeout
    (lsp-keep-workspace-alive nil)          ; Don't keep alive
    
    ;; === LSP-BOOSTER (PERFORMANCE BOOST) ===
    (lsp-use-plists t)                      ; Required for booster
    
    ;; === UI SETTINGS ===
    (lsp-keymap-prefix "C-c l")
    (lsp-enable-which-key-integration t)
    (lsp-enable-snippet t)
    (lsp-headerline-breadcrumb-enable nil)  ; Clean UI
    (lsp-signature-auto-activate nil)       ; Manual signatures
    (lsp-eldoc-render-all nil)              ; Simple eldoc
    
    :config
    ;; === LSP-BOOSTER INTEGRATION ===
    (defun lsp-booster--advice-json-parse (old-fn &rest args)
      "Try to parse bytecode instead of json."
      (or
       (when (equal (following-char) ?#)
         (let ((bytecode (read (current-buffer))))
           (when (byte-code-function-p bytecode)
             (funcall bytecode))))
       (apply old-fn args)))

    (advice-add (if (progn (require 'json)
                           (fboundp 'json-parse-buffer))
                    'json-parse-buffer
                  'json-read)
                :around
                #'lsp-booster--advice-json-parse)

    (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
      "Prepend emacs-lsp-booster command to lsp CMD."
      (let ((orig-result (funcall old-fn cmd test?)))
        (if (and (not test?)
                 (not (file-remote-p default-directory))
                 lsp-use-plists
                 (not (functionp 'json-rpc-connection))
                 (executable-find "emacs-lsp-booster"))
            (progn
              (when-let* ((command-from-exec-path (executable-find (car orig-result))))
                (setcar orig-result command-from-exec-path))
              (message "Using emacs-lsp-booster for %s!" orig-result)
              (cons "emacs-lsp-booster" orig-result))
          orig-result)))
          
    (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)
    
    (emacs-nix-log "LSP-Mode with booster integration configured"))

  ;; === LSP COMPLETION SETUP ===
  (defun my/lsp-mode-setup-completion ()
    "Setup LSP completion with Corfu and orderless."
    ;; Configure orderless for LSP
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless))
    
    ;; Add flex matching for first word
    (add-hook 'orderless-style-dispatchers #'my/orderless-dispatch-flex-first nil 'local)
    
    ;; Use cape-capf-buster to prevent hangs
    (setq-local completion-at-point-functions
                (list (cape-capf-buster #'lsp-completion-at-point))))

  (defun my/orderless-dispatch-flex-first (_pattern index _total)
    "Use flex matching for the first completion component."
    (and (eq index 0) 'orderless-flex))


  ;; === CONSULT-LSP: Modern LSP navigation ===
  (use-package consult-lsp
    :after (consult lsp-mode)
    :bind (:map lsp-mode-map
                ("C-c l s" . consult-lsp-symbols)
                ("C-c l S" . consult-lsp-file-symbols)
                ("C-c l d" . consult-lsp-diagnostics)
                ("C-c l e" . consult-lsp-diagnostics)))

  ;; === CONTEXT-AWARE COMPLETION SETTINGS ===
  (defun my/corfu-popupinfo-setup ()
    "Setup context-aware corfu-popupinfo settings."
    (cond
     ;; LSP modes - fast and detailed
     ((and (bound-and-true-p lsp-mode)
           (memq #'lsp-completion-at-point completion-at-point-functions))
      (setq-local corfu-popupinfo-delay 0.2)
      (setq-local corfu-popupinfo-max-height 25))
     
     ;; Go mode - very fast (gopls is quick)
     ((derived-mode-p 'go-mode)
      (setq-local corfu-popupinfo-delay 0.1))
     
     ;; Elisp - standard
     ((derived-mode-p 'emacs-lisp-mode)
      (setq-local corfu-popupinfo-delay 0.3))
     
     ;; Text modes - slower (less useful docs)
     ((derived-mode-p 'text-mode 'org-mode 'markdown-mode)
      (setq-local corfu-popupinfo-delay 0.8))
     
     ;; Default
     (t
      (setq-local corfu-popupinfo-delay 0.5))))

  ;; Apply context settings
  (add-hook 'corfu-mode-hook #'my/corfu-popupinfo-setup)

  ;; Terminal-specific optimizations
  (unless (display-graphic-p)
    (with-eval-after-load 'corfu
      (setq corfu-popupinfo-delay 0.6)        ; Longer delay in terminal
      (setq corfu-echo-documentation nil)))   ; Disable echo in terminal
#+end_src

* Programming languages

#+begin_src emacs-lisp
  ;; Go
  (use-package go-mode
    :mode "\\.go\\'"
    :hook ((go-mode . lsp-deferred)
           (before-save . lsp-format-buffer)
           (before-save . lsp-organize-imports)))

  ;; Rust
  (use-package rust-mode
    :mode "\\.rs\\'"
    :hook (rust-mode . lsp-deferred))

  ;; TypeScript/JavaScript
  (use-package typescript-mode
    :mode (("\\.ts\\'" . typescript-mode)
           ("\\.tsx\\'" . typescript-mode)))

  (use-package js2-mode
    :mode "\\.js\\'"
    :config
    (setq js2-basic-offset 2))

  ;; Web
  (use-package web-mode
    :mode (("\\.html\\'" . web-mode)
           ("\\.css\\'" . web-mode)
           ("\\.scss\\'" . web-mode)))

  ;; Nix
  (use-package nix-mode
    :mode "\\.nix\\'")

  ;; YAML/JSON
  (use-package yaml-mode
    :mode "\\.ya?ml\\'")

  (use-package json-mode
    :mode "\\.json\\'")

  ;; Markdown
  (use-package markdown-mode
    :mode (("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode)))
#+end_src

* Git integration

#+begin_src emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status))
    :config
    (define-key magit-hunk-section-map (kbd "RET") 'magit-diff-visit-file-other-window)
    (define-key magit-file-section-map (kbd "RET") 'magit-diff-visit-file-other-window))

  (use-package forge
    :after magit)

  (use-package diff-hl
    :demand t
    :config
    (global-diff-hl-mode))
#+end_src

* Project management

#+begin_src emacs-lisp
  (use-package projectile
    :demand t
    :config
    (projectile-mode +1)
    (setq projectile-switch-project-action 'projectile-dired))

  (use-package consult-projectile
    :after (consult projectile))
#+end_src

* Treemacs

#+begin_src emacs-lisp
  (use-package treemacs
    :bind (("M-0" . treemacs-select-window)
           ("C-x t 1" . treemacs-delete-other-windows)
           ("C-x t t" . treemacs)
           ("C-x t B" . treemacs-bookmark)
           ("C-x t C-t" . treemacs-find-file)
           ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil))

  (use-package treemacs-projectile
    :after (treemacs projectile))

  (use-package treemacs-magit
    :after (treemacs magit))
#+end_src

* Org mode

#+begin_src emacs-lisp
  (use-package org
    :mode (("\\.org\\'" . org-mode))
    :config
    (setq org-directory "~/org/")
    (setq org-agenda-files '("~/org/"))
    (setq org-startup-indented t)
    (setq org-hide-emphasis-markers t))
#+end_src

* Terminal

#+begin_src emacs-lisp
  (use-package vterm
    :bind (("C-c t" . vterm)))
#+end_src

* UI enhancements

#+begin_src emacs-lisp
  (use-package doom-modeline
    :demand t
    :config
    (doom-modeline-mode 1))

  (use-package all-the-icons)
#+end_src

* Utilities

#+begin_src emacs-lisp
  (use-package smartparens
    :demand t
    :config
    (require 'smartparens-config)
    (smartparens-global-mode t))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  ;; (use-package ws-butler
  ;;   :hook (prog-mode . ws-butler-mode))  ; Commented out - causing build issues

  (use-package flycheck
    :hook (prog-mode . flycheck-mode))

  (use-package yasnippet
    :demand t
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :after yasnippet)
#+end_src

* Custom modes

#+begin_src emacs-lisp
  (use-package templ-ts-mode
    :mode "\\.templ\\'")

  (use-package gno-mode
    :mode "\\.gno\\'"
    :config
    (require 'gno))

  (use-package go-template-mode
    :mode (("\\.gohtml\\'" . go-template-mode)
           ("\\.gotmpl\\'" . go-template-mode)))
#+end_src

* File associations

#+begin_src emacs-lisp
  ;; File associations
  (add-to-list 'auto-mode-alist '("\\.gohtml\\'" . go-template-mode))
#+end_src

* Window movement and keybindings

#+begin_src emacs-lisp
  ;; Window movement (maintain Spacemacs-like behavior)
  (global-set-key (kbd "C-h") 'windmove-left)
  (global-set-key (kbd "C-j") 'windmove-down)
  (global-set-key (kbd "C-k") 'windmove-up)
  (global-set-key (kbd "C-l") 'windmove-right)

  ;; Enable windmove with shift+arrow keys
  (windmove-default-keybindings 'shift)

  ;; Additional keybindings from your Spacemacs config
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
  (global-set-key (kbd "C-c C-t") 'my/toggle-theme)

  ;; Ctrl+K to erase everything after cursor (kill-line)
  (global-set-key (kbd "C-k") 'kill-line)
#+end_src

* File management

#+begin_src emacs-lisp
  ;; Auto-save configuration (from your Spacemacs config)
  (unless (file-exists-p "/tmp/.emacs-saves/")
    (make-directory "/tmp/.emacs-saves/" t))
  (setq auto-save-file-name-transforms
        `((".*" "/tmp/.emacs-saves/" t)))

  ;; Lock files in tmp (from your Spacemacs config)
  (setq lock-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+end_src

* Spell checking

#+begin_src emacs-lisp
  ;; Aspell configuration (from your Spacemacs config)
  (setq ispell-program-name "aspell")
#+end_src

* Whitespace management

#+begin_src emacs-lisp
  ;; Delete trailing whitespace configuration (from your Spacemacs config)
  (defvar auto-delete-trailing-whitespace t
    "Automatically delete trailing whitespace on save.")

  (defun toggle-auto-delete-trailing-whitespace ()
    "Toggle the automatic deletion of trailing whitespace."
    (interactive)
    (setq auto-delete-trailing-whitespace (not auto-delete-trailing-whitespace))
    (if auto-delete-trailing-whitespace
        (message "Auto delete trailing whitespace enabled")
      (message "Auto delete trailing whitespace disabled")))

  (defun maybe-delete-trailing-whitespace ()
    "Delete trailing whitespace if `auto-delete-trailing-whitespace' is non-nil."
    (when auto-delete-trailing-whitespace
      (delete-trailing-whitespace)))

  (add-hook 'before-save-hook 'maybe-delete-trailing-whitespace)
#+end_src

* Clipeboard Configurations

#+begin_src emacs-lisp
  (use-package clipetty
    :ensure t
    :hook
    (after-init . global-clipetty-mode)
    :config
    ;; For tmux users: Tell clipetty to assume nested mux when over SSH
    (setq clipetty-assume-nested-mux t)
    ;; Bind Cmd+C to use clipetty's kill-ring-save for manual clipboard operations
    (global-set-key (kbd "H-c") 'clipetty-kill-ring-save)
    (emacs-nix-log "Clipetty OSC 52 clipboard integration enabled"))
#+end_src

* macOS specific configurations

#+begin_src emacs-lisp
  ;; macOS-specific settings for terminal use (enhanced Spacemacs OSX layer features)
  (when (eq system-type 'darwin)
    ;; Modifier key configurations for terminal
    (setq mac-command-modifier 'hyper     ; Cmd key as Hyper
          mac-option-modifier 'meta       ; Option key as Meta (Alt)
          mac-control-modifier 'control)  ; Control key as Control

    ;; Use macOS native ls via coreutils if available
    (when (executable-find "gls")
      (setq insert-directory-program "gls"))

    ;; === ENHANCED KEYBINDINGS (Spacemacs OSX layer style) ===
    ;; Basic macOS shortcuts
    (global-set-key (kbd "H-q") 'save-buffers-kill-terminal) ; Cmd+Q to quit
    (global-set-key (kbd "H-s") 'save-buffer)                ; Cmd+S to save
    (global-set-key (kbd "H-w") 'delete-window)              ; Cmd+W to close window
    (global-set-key (kbd "H-t") 'find-file)                  ; Cmd+T for new "tab" (file)
    (global-set-key (kbd "H-o") 'find-file)                  ; Cmd+O to open file
    (global-set-key (kbd "H-a") 'mark-whole-buffer)          ; Cmd+A to select all

    ;; Undo/Redo
    (global-set-key (kbd "H-z") 'undo)                       ; Cmd+Z to undo
    (global-set-key (kbd "H-Z") 'undo-redo)                  ; Cmd+Shift+Z to redo

    (emacs-nix-log "Enhanced macOS terminal configuration loaded with universal clipboard (OSC 52), scaling, and dictionary support"))
#+end_src

* Performance restore and completion optimizations

#+begin_src emacs-lisp
  ;; === PERFORMANCE OPTIMIZATIONS ===
  ;; Set at startup
  (setq gc-cons-threshold 100000000)          ; 100MB for LSP
  (setq read-process-output-max (* 1024 1024)) ; 1MB read buffer
  (setq gc-cons-percentage 0.6)               ; GC percentage

  ;; Completion performance
  (setq completion-cycle-threshold 3)         ; TAB cycles with few candidates
  (setq tab-always-indent 'complete)          ; TAB completes
  (setq completion-pcm-word-delimiters "-_./:| ")

  ;; At the end of config, restore reasonable GC
  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold 100000000)  ; Keep high for LSP
              (emacs-nix-log "Performance settings optimized for LSP + Corfu")))

  (emacs-nix-log "=== Ultimate Corfu + LSP configuration loaded successfully ===")
#+end_src
